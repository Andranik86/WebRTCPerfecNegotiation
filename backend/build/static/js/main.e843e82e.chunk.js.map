{"version":3,"sources":["constants.js","ConnectionIndicator/index.js","App.js","reportWebVitals.js","index.js"],"names":["ICE_SERVERS","urls","CONNECTION_STATE","ConnectionIndicator","props","activityText","activityClassName","connectionState","push","makingOfferAnswer","className","join","negotiationFaileMessage","App","polite","peer","RTCPeerConnection","transceiver","iceRestartsLimit","iceRestartsCount","iceGatheringTimeout","offerTimeoutValue","lastSdpOffer","offerTimer","socket","io","videoRef","React","createRef","state","uuid","makingOffer","offerTimeout","offerComplete","makingAnswer","startNewConnection","streamableConnection","recording","paused","logs","negotiationNeededHandler","bind","iceGatheringStateChangeHandler","iceConnectionStateChangeHandler","iceCandidateHandler","newPeerConnectionHandler","startRecordHandler","pauseRecordingHandler","stopRecordingHandler","log","clearLogs","captureCamera","closePeer","completeIceGathering","newPeerConnection","on","id","a","description","offerCollision","type","signalingState","ignoreOffer","clearTimeout","offerTImer","setState","Promise","all","setLocalDescription","setRemoteDescription","createAnswer","answer","iceGatheringPromise","emit","localDescription","this","_","prevState","timeout","iceGatheringObserver","runObserver","iceCandidateObserver","timeoutObserver","e","res","iceGatheringState","removeEventListener","candidate","addEventListener","setTimeout","resolved","rej","undefined","promise","addTransceiver","direction","streams","createOffer","offer","close","message","iceConnectionState","data","success","iceServers","mediaStream","getVideoTracks","videoTrack","console","trim","getTracks","forEach","track","stop","videoElem","current","navigator","mediaDevices","getUserMedia","video","facingMode","audio","srcObject","sender","readyState","replaceTrack","err","onClick","autoPlay","muted","ref","map","msg","i","Component","observer","finished","rejected","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e843e82e.chunk.js","sourcesContent":["const SERVER_URL =  'http://localhost:8000' // 'http://localhost:8000'\n\nconst ICE_SERVERS = [\n    {\n        urls: 'stun:stun1.l.google.com:19302'\n    },\n    {\n        urls: 'stun:stun2.l.google.com:19302'\n    },\n    // // {\n    // //     urls: 'stun:stun3.l.google.com:19302'\n    // // },\n    // // {\n    // //     urls: 'stun:stun4.l.google.com:19302'\n    // // }\n]\n\nconst CONNECTION_STATE = {\n    NEW: 'NEW',\n    CONNECTED: 'CONNECTED',\n    DISCONNECTED: 'DISCONNECTED',\n    NEGOTIATING: 'NEGOTIATING',\n    CLOSED: 'CLOSED'\n}\n\nexport {\n    SERVER_URL,\n    ICE_SERVERS,\n    CONNECTION_STATE,\n}","import React from 'react'\n\nimport {\n    CONNECTION_STATE,\n    GATHERING_STATE,\n} from '../constants'\n\nfunction ConnectionIndicator(props) {\n    const activityClassName = ['connectionActivity']\n    let activityText\n    switch (props.connectionState) {\n        case CONNECTION_STATE.DISCONNECTED:\n            activityClassName.push('disconnected')\n            activityText = 'Peer Disconnected'\n            break\n        case CONNECTION_STATE.NEGOTIATING:\n            activityClassName.push('connecting')\n            activityText = `Peer Negotiating: ${CONNECTION_STATE.NEGOTIATING}`\n            break\n        case CONNECTION_STATE.CONNECTED:\n            activityClassName.push('connected')\n            activityText = 'Peer Connected'\n            break\n        case CONNECTION_STATE.NEW:\n            activityText = 'New Peer'\n        case CONNECTION_STATE.CLOSED:\n            activityText = 'Peer Closed'\n        default:\n            activityClassName.push('closed')\n            break\n    }\n    if (props.makingOfferAnswer && props.connectionState !== CONNECTION_STATE.CONNECTED) {\n        activityClassName.push('connecting')\n        activityText = `Peer Negotiating: ${props.connectionState}`\n    }\n    return <>\n        <div className={activityClassName.join(' ')}></div>\n        {props.negotiationFaileMessage ? <p>Negotiation Faile Message: {props.negotiationFaileMessage}</p> : null}\n        <p>{activityText}</p>\n    </>\n}\n\nexport default ConnectionIndicator","import React from 'react'\nimport './App.css';\nimport io from 'socket.io-client'\n\n// Components\nimport ConnectionIndicator from './ConnectionIndicator'\n\nimport {\n  SERVER_URL,\n  ICE_SERVERS,\n  CONNECTION_STATE,\n} from './constants'\n\nconst DEFAULT_ICE_RESTARTS_LIMIT = 2\nconst DEFAULT_OFFER_TIMEOUT = 10 * 60 * 1000\nconst DEFAULT_ICE_GATHERING_TIMEOUT = 5000\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.polite = props.polite\n\n    this.state = {\n      uuid: null,\n      makingOffer: false,\n      offerTimeout: false,\n      offerComplete: false,\n\n      makingAnswer: false,\n      startNewConnection: false,\n      connectionState: CONNECTION_STATE.CLOSED,\n\n      streamableConnection: false,\n      recording: false,\n      paused: false,\n\n      logs: [],\n    }\n\n    this.negotiationNeededHandler = this.negotiationNeededHandler.bind(this)\n    this.iceGatheringStateChangeHandler = this.iceGatheringStateChangeHandler.bind(this)\n    this.iceConnectionStateChangeHandler = this.iceConnectionStateChangeHandler.bind(this)\n    this.iceCandidateHandler = this.iceCandidateHandler.bind(this)\n    this.newPeerConnectionHandler = this.newPeerConnectionHandler.bind(this)\n    this.startRecordHandler = this.startRecordHandler.bind(this)\n    this.pauseRecordingHandler = this.pauseRecordingHandler.bind(this)\n    this.stopRecordingHandler = this.stopRecordingHandler.bind(this)\n\n    this.log = this.log.bind(this)\n    this.clearLogs = this.clearLogs.bind(this)\n    this.captureCamera = this.captureCamera.bind(this)\n    this.closePeer = this.closePeer.bind(this)\n    this.completeIceGathering = this.completeIceGathering.bind(this)\n    this.newPeerConnection = this.newPeerConnection.bind(this)\n\n    this.socket.on('connect', () => {\n      this.log(`Socket connected: ${this.socket.id}`)\n    })\n\n    this.socket.on('description', async ({ uuid, description }) => {\n      this.log(`Description Rescived: ${uuid}`)\n      const socket = this.socket\n      const peer = this.peer\n\n      const offerCollision = (description.type === 'offer') &&\n        (this.state.makingOffer || peer.signalingState !== 'stable')\n      const ignoreOffer = !this.polite && offerCollision\n\n      this.log(`OfferCollision: ${offerCollision}`)\n      if (ignoreOffer) return\n\n      if (this.offerTimer) {\n        clearTimeout(this.offerTImer)\n        this.offerTimer = null\n      }\n\n      if (description.type === 'offer') {\n        this.setState({\n          makingOffer: false,\n          makingAnswer: true,\n        })\n      } else {\n        this.setState({\n          makingOffer: false,\n        })\n      }\n\n      if (offerCollision) {\n        await Promise.all([\n          peer.setLocalDescription({ type: 'rollback' }),\n          peer.setRemoteDescription(description)\n        ])\n      } else {\n        await peer.setRemoteDescription(description)\n      }\n      this.log(`Remote Description Added: ${description.type}`)\n\n      if (description.type === 'offer') {\n        const answer = await peer.createAnswer()\n        const iceGatheringPromise = this.completeIceGathering()\n        this.log('Trying to Add Local Description and find ice candidates')\n        await Promise.all([\n          iceGatheringPromise,\n          peer.setLocalDescription(answer),\n        ])\n        this.log('Local Description Added: Answer')\n        this.setState({\n          makingAnswer: false,\n        })\n        socket.emit('description', { uuid, description: peer.localDescription })\n        this.log('Answer Sended')\n      }\n    })\n  }\n\n  polite = true\n  peer = new RTCPeerConnection({})\n  transceiver = null\n\n  iceRestartsLimit = DEFAULT_ICE_RESTARTS_LIMIT\n  iceRestartsCount = 0\n\n  iceGatheringTimeout = DEFAULT_ICE_GATHERING_TIMEOUT\n\n  offerTimeoutValue = DEFAULT_OFFER_TIMEOUT\n  lastSdpOffer = null\n  offerTimer = null\n\n  socket = io(/* SERVER_URL, */ /* {\n    // withCredentials: false,\n    // mode: 'cors',\n    // origin: '*',\n    // transport: ['websocket']\n  } */)\n\n  videoRef = React.createRef()\n\n\n  async componentDidMount() {\n    this.log('ComponentDidMount')\n    this.setState({\n      startNewConnection: true,\n    })\n    // await this.newPeerConnection()\n  }\n\n  async componentDidUpdate(_, prevState) {\n    if (this.state.startNewConnection === true) {\n      this.setState({\n        startNewConnection: false,\n      })\n      await this.newPeerConnection()\n    }\n  }\n\n  async completeIceGathering(timeout) {\n    const peer = this.peer\n    const iceGatheringTimeout = this.iceGatheringTimeout\n\n    const iceGatheringObserver = runObserver()\n    const iceCandidateObserver = runObserver()\n    const timeoutObserver = runObserver()\n\n    const iceGatheringStateChangeHandler = (e) => {\n      timeoutObserver.res()\n      if (peer.iceGatheringState === 'complete') {\n        peer.removeEventListener('icegatheringstatechange', iceGatheringStateChangeHandler)\n        this.log('\\ngathering state completed')\n        return iceGatheringObserver.res()\n      }\n    }\n    const iceCandidateHandler = ({ candidate }) => {\n      timeoutObserver.res()\n      if (!candidate) {\n        peer.removeEventListener('icecandidate', iceCandidateHandler)\n        this.log('end-of-candidates received')\n        return iceCandidateObserver.res()\n      }\n    }\n\n    peer.addEventListener('icegatheringstatechange', iceGatheringStateChangeHandler)\n    peer.addEventListener('icecandidate', iceCandidateHandler)\n    setTimeout(() => {\n      if (timeoutObserver.resolved) {\n        return\n      }\n\n      timeoutObserver.rej()\n      peer.removeEventListener('icegatheringstatechange', iceGatheringStateChangeHandler)\n      peer.removeEventListener('icecandidate', iceCandidateHandler)\n    }, timeout !== null && timeout !== undefined ? timeout : iceGatheringTimeout)\n\n    try {\n      await timeoutObserver.promise\n\n      await Promise.all([\n        iceGatheringObserver.promise,\n        iceCandidateObserver.promise,\n      ])\n      this.log('ICE GATHERING PERFORMED')\n    } catch {\n      this.log('NO ICE GATHERING PERFORMED: Timeout Occured')\n    } finally {\n      this.log('ICE GATHERING COMPLETED\\n')\n      return\n    }\n  }\n\n  async negotiationNeededHandler() {\n    const uuid = this.state.uuid\n    this.log('negotiationNeededHandler')\n    const peer = this.peer\n    const socket = this.socket\n\n    if (!this.transceiver) { // peer.getTransceivers().every(transceiver => transceiver.direction === 'stopped')) {\n      this.transceiver = await peer.addTransceiver('video', {\n        direction: 'inactive',\n        streams: [],\n      })\n    }\n    this.log('red')\n    try {\n      this.setState({\n        makingOffer: true,\n      })\n      this.log('blue')\n      const iceGatheringPromise = this.completeIceGathering()\n      this.log('bluetooth')\n      const offer = await peer.createOffer()\n      await Promise.all([\n        iceGatheringPromise,\n        peer.setLocalDescription(offer),\n      ])\n      this.log('Local Description Added: Offer')\n      socket.emit('description', { uuid, description: peer.localDescription })\n      this.log('Offer Sended')\n\n      const lastSdpOffer = peer.localDescription\n      this.lastSdpOffer = lastSdpOffer\n      this.offerTimer = setTimeout(() => {\n        if (peer.signalingState === 'have-local-offer' && lastSdpOffer === this.lastSdpOffer) {\n          this.log(`Closing Connection: ${uuid} due to SDP Offer Timeout`)\n          peer.close()\n          this.setState({\n            makingOffer: false,\n            offerTimeout: true,\n          })\n        }\n      }, this.offerTimeoutValue)\n    } catch (err) {\n      this.log(err.message)\n      this.setState({\n        makingOffer: false,\n        negotiationFaileMessage: 'Connection Failed: Blablabla',\n      })\n    }\n  }\n  iceCandidateHandler({ candidate }) {\n    this.log('iceCandidateHandler')\n  }\n  iceGatheringStateChangeHandler() {\n    switch (this.peer.iceGatheringState) {\n      case 'new':\n        this.log('ICE Gathering: New')\n        break\n      case 'gathering':\n        this.log('ICE Gathering: Gathering')\n        break\n      case 'complete':\n        this.log('ICE Gathering: Completed')\n        break\n      default:\n    }\n  }\n\n  iceConnectionStateChangeHandler() {\n    this.log(`\\niceConnectionStateChangeHandler: ${this.state.uuid}`)\n    this.log(`STATE: ${this.peer.iceConnectionState}\\n`)\n    switch (this.peer.iceConnectionState) {\n      case 'checking':\n        this.setState({\n          connectionState: CONNECTION_STATE.NEGOTIATING,\n          negotiationFaileMessage: 'Checking ICE Candidates',\n          streamableConnection: false\n        })\n        break\n      case 'disconnected':\n        // this.peer.restartIce()\n        // this.closePeer()\n\n        this.setState({\n          connectionState: CONNECTION_STATE.DISCONNECTED,\n          negotiationFaileMessage: 'Temporarly Disconnected', //: Perviously Closing Connection\n          streamableConnection: false\n        })\n        break\n      case 'failed':\n        this.closePeer()\n\n        this.setState({\n          connectionState: CONNECTION_STATE.DISCONNECTED,\n          negotiationFaileMessage: 'Connection Failed: Closing connection',\n          streamableConnection: false\n        })\n        break\n      case 'closed':\n        this.transceiver = null\n        this.peer = null\n\n        this.setState({\n          uuid: null,\n          connectionState: CONNECTION_STATE.CLOSED,\n          negotiationFaileMessage: 'Connection Closed',\n          streamableConnection: false\n        })\n        break\n      case 'connected':\n      case 'completed':\n        this.setState({\n          connectionState: CONNECTION_STATE.CONNECTED,\n          offerTimeout: false,\n          negotiationFaileMessage: null,\n          streamableConnection: true,\n        })\n        break\n      default:\n        this.setState({\n          streamableConnection: false\n        })\n    }\n  }\n\n  newPeerConnection() {\n    this.socket.emit('getUUID', async ({ data, success }) => {\n      if (!success) return\n      const { uuid } = data\n\n      this.log(`GetUUID: ${uuid}`)\n      this.setState({ uuid })\n      this.peer = new RTCPeerConnection({ iceServers: ICE_SERVERS })\n      this.peer.addEventListener('negotiationneeded', this.negotiationNeededHandler)\n      this.peer.addEventListener('icegatheringstatechange', this.iceGatheringStateChangeHandler)\n      this.peer.addEventListener('iceconnectionstatechange', this.iceConnectionStateChangeHandler)\n      this.peer.addEventListener('icecandidate', this.iceCandidateHandler)\n\n      try {\n        this.mediaStream = await this.captureCamera()\n\n        this.setState({ recording: false, paused: false })\n        const [videoTrack] = this.mediaStream.getVideoTracks()\n        this.transceiver = await this.peer.addTransceiver(videoTrack, {\n          direction: 'inactive',\n          streams: [this.mediaStream],\n        })\n      } catch (err) {\n        this.log(err.message)\n        this.closePeer()\n      }\n    })\n  }\n\n  log(message) {\n    message += ''\n    console.log(message)\n    this.setState((state) => ({ ...state, logs: [...state.logs, message.trim()] }))\n  }\n  clearLogs() {\n    this.setState({\n      logs: []\n    })\n  }\n\n  closePeer() {\n    this.log('closePeer')\n    if (this.peer && this.peer.iceConnectionState !== 'closed') {\n      this.peer.close()\n\n      if (this.mediaStream) {\n        this.mediaStream.getTracks().forEach(track => {\n          track.stop()\n        })\n        this.mediaStream = null\n      }\n\n      this.socket.emit('closePeer', { uuid: this.state.uuid })\n      return\n    }\n  }\n\n  newPeerConnectionHandler() {\n    this.closePeer()\n    this.setState({\n      uuid: null,\n      makingOffer: false,\n      offerTimeout: false,\n      offerComplete: false,\n\n      makingAnswer: false,\n      startNewConnection: true,\n      connectionState: CONNECTION_STATE.CLOSED,\n\n      streamableConnection: false,\n    })\n  }\n\n  async captureCamera() {\n    const videoElem = this.videoRef.current\n\n    const mediaStream = await navigator.mediaDevices.getUserMedia({\n      video: {\n        facingMode: 'user'\n      },\n      audio: false,\n    })\n    videoElem.srcObject = mediaStream\n    return mediaStream\n  }\n\n  async startRecordHandler() {\n    if (this.state.streamableConnection && (!this.state.recording || (this.state.recording && this.state.paused))) {\n      if (!this.peer || !this.transceiver || this.transceiver.direction === 'stopped') {\n        return\n      }\n      if (!this.transceiver) { // peer.getTransceivers().every(transceiver => transceiver.direction === 'stopped')) {\n        this.transceiver = await this.peer.addTransceiver('video', {\n          direction: 'inactive',\n          streams: [],\n        })\n      }\n      if (!this.transceiver.sender.track || this.transceiver.sender.track.readyState === 'ended') {\n        this.mediaStream = await this.captureCamera()\n\n        const [videoTrack] = this.mediaStream.getVideoTracks()\n        this.transceiver.sender.replaceTrack(videoTrack)\n      }\n\n      this.transceiver.direction = 'sendonly'\n\n      this.log(`\\nStart Recording: ${this.state.uuid}`)\n      this.setState({ recording: true, paused: false })\n    }\n  }\n\n  async pauseRecordingHandler() {\n    if (this.state.streamableConnection && this.state.recording && !this.state.paused) {\n      if (!this.peer || !this.transceiver || this.transceiver.direction === 'stopped') {\n        return\n      }\n      this.log(`\\nPause Recording: ${this.state.uuid}`)\n      this.transceiver.direction = 'inactive'\n      this.setState({ recording: true, paused: true })\n    }\n  }\n\n  async stopRecordingHandler() {\n    if (this.state.streamableConnection && this.state.recording) {\n      if (!this.peer || !this.transceiver || this.transceiver.direction === 'stopped') {\n        return\n      }\n      this.log(`\\nStop Recording: ${this.state.uuid}`)\n      // this.transceiver.direction = 'inactive'\n      // if (this.transceiver.sender.track) {\n      //   this.transceiver.sender.track.stop()\n      // }\n      try {\n        this.transceiver.direction = 'inactive'\n        // this.transceiver.sender.track.stop()\n        this.transceiver.stop()\n        this.transceiver = null\n      } catch (err) {\n        this.log(err.message)\n      }\n      this.setState({ recording: false, paused: false })\n    }\n  }\n\n  render() {\n    // this.log(this.state)\n    return (\n      <div className=\"App\">\n        <div>\n          <ConnectionIndicator\n            connectionState={this.state.connectionState} makingOfferAnswer={this.state.makingOffer || this.state.makingAnswer} negotiationFaileMessage={this.state.negotiationFaileMessage} />\n          <button onClick={this.newPeerConnectionHandler}>New Peer Connection</button>\n          <button onClick={this.startRecordHandler} className={this.state.streamableConnection && (!this.state.recording || (this.state.recording && this.state.paused)) ? \"success\" : \"error\"}>Start Recording</button>\n          <button onClick={this.pauseRecordingHandler} className={this.state.streamableConnection && this.state.recording && !this.state.paused ? \"success\" : \"error\"}>Pause Recording</button>\n          <button onClick={this.stopRecordingHandler} className={this.state.streamableConnection && this.state.recording ? \"success\" : \"error\"}>Stop Recording</button>\n          <video autoPlay={true} muted={true} ref={this.videoRef}></video>\n        </div>\n        <div>\n          <button onClick={this.clearLogs}>Clear Logs</button>\n          <p>:logs:</p>\n          {this.state.logs.map((msg, i) => <p key={i}>{i}: {msg}</p>)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App\n\nfunction runObserver() {\n  const observer = {\n    res: null,\n    rej: null,\n    promise: null,\n\n    finished: false,\n    resolved: false,\n    rejected: false,\n  }\n  observer.promise = new Promise((res, rej) => {\n    observer.res = () => {\n      if (observer.finished) {\n        return\n      }\n      observer.finished = true\n      observer.resolved = true\n      res()\n    }\n    observer.rej = () => {\n      if (observer.finished) {\n        return\n      }\n      observer.finished = true\n      observer.rejected = true\n      rej()\n    }\n  })\n  return observer\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst polite = true\n\nReactDOM.render(\n  <React.StrictMode>\n    <App polite={polite}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}